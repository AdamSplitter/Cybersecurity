import requests
import socket
import ssl
import re
from bs4 import BeautifulSoup
import os
import time

# Function 1: Port Scanner
def scan_ports(target, ports=[21, 22, 80, 443, 8080]):
    print(f"[*] Scanning ports on {target}")
    open_ports = []
    for port in ports:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                if not s.connect_ex((target, port)):
                    print(f"[+] Port {port} is OPEN")
                    open_ports.append(port)
        except Exception as e:
            print(f"[-] Error scanning port {port}: {e}")
    return open_ports

# Function 2: Server Header Detection
def check_server_headers(url):
    print(f"[*] Checking server headers for {url}")
    try:
        response = requests.get(url)
        server = response.headers.get('Server', 'Unknown')
        print(f"[+] Server Header: {server}")
        return server
    except Exception as e:
        print(f"[-] Error: {e}")
        return "Unknown"

# Function 3: Directory Enumeration
def directory_enumeration(url, wordlist_path):
    print(f"[*] Performing directory enumeration on {url}")
    found_directories = []
    if not os.path.isfile(wordlist_path):
        print("[-] Wordlist file not found!")
        return found_directories
    
    with open(wordlist_path, 'r') as wordlist:
        for directory in wordlist:
            directory = directory.strip()
            full_url = f"{url}/{directory}"
            try:
                response = requests.get(full_url)
                if response.status_code == 200:
                    print(f"[+] Found: {full_url}")
                    found_directories.append(full_url)
            except:
                pass
    return found_directories

# Function 4: SSL/TLS Version Check
def check_ssl_version(target):
    print(f"[*] Checking SSL/TLS version for {target}")
    try:
        context = ssl.create_default_context()
        with socket.create_connection((target, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=target) as ssock:
                print(f"[+] TLS/SSL Version: {ssock.version()}")
                return ssock.version()
    except Exception as e:
        print(f"[-] Error: {e}")
        return "Unknown"

# Function 5: SQL Injection Test
def sql_injection_test(url, param):
    print(f"[*] Testing for SQL Injection on {url}")
    payloads = ["' OR 1=1 --", "\" OR 1=1 --"]
    vulnerable = False
    for payload in payloads:
        injection_url = f"{url}?{param}={payload}"
        try:
            response = requests.get(injection_url)
            if "SQL" in response.text or "error" in response.text:
                print(f"[!] Possible SQL Injection detected: {injection_url}")
                vulnerable = True
        except Exception as e:
            print(f"[-] Error: {e}")
    return vulnerable

# Function 6: Report Generation
def generate_report(target, results):
    print(f"[*] Generating HTML report for {target}")
    report = f"""
    <html>
    <head><title>Vulnerability Scan Report - {target}</title></head>
    <body>
        <h1>Vulnerability Scan Report</h1>
        <p><b>Target:</b> {target}</p>
        <h2>Scan Results</h2>
        <ul>
            <li><b>Open Ports:</b> {results['ports']}</li>
            <li><b>Server Header:</b> {results['server']}</li>
            <li><b>SSL/TLS Version:</b> {results['ssl_version']}</li>
            <li><b>SQL Injection:</b> {'Vulnerable' if results['sql_injection'] else 'Not Detected'}</li>
            <li><b>Directories Found:</b>
                <ul>
                    {''.join(f"<li>{dir}</li>" for dir in results['directories'])}
                </ul>
            </li>
        </ul>
    </body>
    </html>
    """
    with open("vulnerability_report.html", "w") as f:
        f.write(report)
    print("[+] Report saved to vulnerability_report.html")

# Main Function
if __name__ == "__main__":
    print("===== Extended OWASP Vulnerability Scanner =====")
    target_domain = input("Enter target domain (example.com): ").strip()
    url = f"http://{target_domain}"

    # Perform Scans
    scan_results = {
        "ports": scan_ports(target_domain),
        "server": check_server_headers(url),
        "ssl_version": check_ssl_version(target_domain),
        "directories": directory_enumeration(url, "wordlist.txt"),
        "sql_injection": sql_injection_test(url, "id")
    }

    # Generate Report
    generate_report(target_domain, scan_results)
